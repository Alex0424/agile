{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Agile Methodology Guide","text":"<p>This comprehensive guide covers agile methodology, DevOps practices, and frameworks to help teams deliver value efficiently and continuously.</p>"},{"location":"#what-is-agile","title":"What is Agile?","text":"<p>Agile is a project management and software development methodology that emphasizes:</p> <ul> <li>Individuals and interactions over processes and tools</li> <li>Working software over comprehensive documentation  </li> <li>Customer collaboration over contract negotiation</li> <li>Responding to change over following a plan</li> </ul>"},{"location":"#agile-devops-a-powerful-combination","title":"Agile + DevOps: A Powerful Combination","text":"<p>While Agile focuses on iterative development and team collaboration, DevOps extends these principles to operations and deployment. Together, they create a complete framework for modern software delivery:</p> <p>Why Combine Agile and DevOps?</p> <ul> <li>Agile delivers working software in short cycles</li> <li>DevOps ensures that software reaches users quickly and reliably</li> <li>Together they enable continuous value delivery from development to production</li> </ul>"},{"location":"#key-benefits-of-integration","title":"Key Benefits of Integration","text":"Agile Strength DevOps Enhancement Combined Result \ud83d\udd04 Iterative development \ud83d\ude80 Continuous deployment Faster time-to-market \ud83d\udc65 Cross-functional teams \ud83d\udd17 Dev-Ops collaboration End-to-end ownership \ud83d\udcc8 Regular feedback \ud83d\udcca Continuous monitoring Real-time insights"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to Agile?</p> <p>Start with the Introduction to understand core concepts.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"Section Description Link \ud83d\ude80 Fundamentals Learn the core principles and frameworks Get started \ud83d\udd04 Agile vs DevOps Understand how Agile and DevOps complement each other Compare approaches \u2699\ufe0f Practices Practical guides for agile ceremonies Explore practices"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<p>Modern Development Approach</p> <p>This guide teaches you to implement both Agile and DevOps as a unified approach:</p> <ul> <li>\ud83d\udccb Agile Planning: Sprint planning, user stories, and backlog management</li> <li>\ud83d\udd27 DevOps Integration: CI/CD, automation, and continuous monitoring  </li> <li>\ud83e\udd1d Team Collaboration: Breaking down silos between development and operations</li> <li>\ud83d\udcca Continuous Improvement: Using metrics and feedback for iterative enhancement</li> </ul>"},{"location":"fundamentals/agile-vs-devops/","title":"Agile vs DevOps: Understanding the Differences","text":"<p>While Agile and DevOps are often mentioned together, they serve different purposes in software development and organizational culture. Understanding their relationship helps teams implement both effectively.</p>"},{"location":"fundamentals/agile-vs-devops/#what-is-devops","title":"What is DevOps?","text":"<p>DevOps is a set of practices that combines software development (Dev) and IT operations (Ops) to shorten the development lifecycle and provide continuous delivery with high software quality.</p>"},{"location":"fundamentals/agile-vs-devops/#key-differences","title":"Key Differences","text":"Aspect Agile DevOps Focus Software development methodology Software development and operational practices Scope Development team Entire organization (Dev + Ops) Goal Deliver working software frequently Continuous integration and deployment Timeline 2-4 week sprints Continuous activities (CI/CD, monitoring, feedback) Communication Within development team Cross-functional collaboration <p>What 'Continuous' Means in DevOps</p> <p>DevOps \"continuous process\" refers to ongoing activities that happen constantly:</p> <ul> <li>Continuous Integration (CI): Code is merged and tested multiple times per day</li> <li>Continuous Deployment (CD): Code changes are automatically deployed to production</li> <li>Continuous Monitoring: Systems are monitored 24/7 for performance and issues</li> <li>Continuous Feedback: User feedback and metrics are collected in real-time</li> </ul> <p>Unlike Agile's sprint cycles, these DevOps practices don't pause between iterations - they run continuously throughout development and after deployment.</p>"},{"location":"fundamentals/agile-vs-devops/#the-cultural-component","title":"The Cultural Component","text":"<p>When we say DevOps emphasizes \"culture,\" we mean:</p> <ul> <li>Shared responsibility - Developers and operations teams share ownership of the entire software lifecycle</li> <li>Collaboration mindset - Breaking down traditional silos between teams</li> <li>Continuous learning - Embracing failure as learning opportunities</li> <li>Automation first - Cultural shift toward automating repetitive tasks</li> <li>Customer focus - Both Dev and Ops align around delivering value to end users</li> </ul> <p>This cultural transformation is what makes DevOps more than just a set of tools - it's a fundamental change in how teams work together.</p>"},{"location":"fundamentals/agile-vs-devops/#similarities","title":"Similarities","text":"<p>Both Agile and DevOps emphasize:</p> <ul> <li>Collaboration over silos</li> <li>Iterative improvement </li> <li>Customer feedback and responsiveness</li> <li>Automation where possible</li> <li>Quality as a shared responsibility</li> </ul>"},{"location":"fundamentals/agile-vs-devops/#how-they-work-together","title":"How They Work Together","text":"<p>Complementary Approaches</p> <p>Agile and DevOps are not competing methodologies - they complement each other perfectly.</p>"},{"location":"fundamentals/agile-vs-devops/#agile-enables-devops","title":"Agile Enables DevOps","text":"<ul> <li>Short iterations align with continuous delivery</li> <li>Cross-functional teams support DevOps culture</li> <li>Regular retrospectives drive operational improvements</li> </ul>"},{"location":"fundamentals/agile-vs-devops/#devops-enhances-agile","title":"DevOps Enhances Agile","text":"<ul> <li>Automated testing speeds up sprint cycles</li> <li>Continuous deployment reduces release friction</li> <li>Infrastructure as code supports rapid scaling</li> </ul>"},{"location":"fundamentals/agile-vs-devops/#implementation-strategy","title":"Implementation Strategy","text":"<pre><code>graph TD\n    A[Start with Agile] --&gt; B[Establish Sprint Cycles]\n    B --&gt; C[Build Cross-functional Teams]\n    C --&gt; D[Introduce DevOps Practices]\n    D --&gt; E[Automate Testing]\n    E --&gt; F[Implement CI/CD]\n    F --&gt; G[Monitor and Iterate]\n    G --&gt; B</code></pre>"},{"location":"fundamentals/agile-vs-devops/#common-misconceptions","title":"Common Misconceptions","text":"<p>Myth vs Reality</p> <p>Myth: DevOps replaces Agile Reality: DevOps extends Agile principles to operations</p> <p>Myth: You must choose one or the other Reality: They work best when implemented together</p>"},{"location":"fundamentals/agile-vs-devops/#best-practices-for-integration","title":"Best Practices for Integration","text":"<ol> <li>Start with Agile fundamentals</li> <li>Establish sprint cycles</li> <li>Build collaborative culture</li> <li> <p>Focus on working software</p> </li> <li> <p>Gradually introduce DevOps</p> </li> <li>Automate manual processes</li> <li>Implement continuous integration</li> <li> <p>Break down Dev/Ops silos</p> </li> <li> <p>Measure and improve</p> </li> <li>Track deployment frequency</li> <li>Monitor mean time to recovery</li> <li>Gather feedback continuously</li> </ol>"},{"location":"fundamentals/agile-vs-devops/#conclusion","title":"Conclusion","text":"<p>Agile and DevOps are complementary approaches that, when combined, create a powerful framework for delivering high-quality software rapidly and reliably. Organizations benefit most when they implement both as part of a cohesive strategy.</p>"},{"location":"fundamentals/introduction/","title":"Introduction to Modern Software Development","text":"<p>Welcome to the fundamentals of modern software development! This guide explores how Agile methodology and DevOps practices work together to create efficient, collaborative, and responsive development environments.</p>"},{"location":"fundamentals/introduction/#the-evolution-of-software-development","title":"The Evolution of Software Development","text":"<p>Traditional software development often involved long planning phases, extensive documentation, and infrequent releases. Modern approaches emphasize:</p> <ul> <li>Iterative development over waterfall planning</li> <li>Collaboration over siloed teams</li> <li>Continuous delivery over infrequent releases</li> <li>Rapid feedback over delayed validation</li> </ul>"},{"location":"fundamentals/introduction/#two-complementary-approaches","title":"Two Complementary Approaches","text":""},{"location":"fundamentals/introduction/#agile-methodology","title":"Agile Methodology","text":"<p>Focuses on how teams work together to build software: - Iterative development in short cycles (sprints) - Cross-functional team collaboration - Customer feedback and adaptation - Working software as the measure of progress</p>"},{"location":"fundamentals/introduction/#devops-practices","title":"DevOps Practices","text":"<p>Focuses on how software moves from development to production: - Continuous integration and deployment - Infrastructure automation - Monitoring and feedback loops - Collaboration between development and operations</p>"},{"location":"fundamentals/introduction/#the-modern-development-lifecycle","title":"The Modern Development Lifecycle","text":"<pre><code>graph LR\n    A[Planning] --&gt; B[Development]\n    B --&gt; C[Testing]\n    C --&gt; D[Deployment]\n    D --&gt; E[Monitoring]\n    E --&gt; F[Feedback]\n    F --&gt; A\n\n    subgraph \"Agile Focus\"\n    A\n    B\n    end\n\n    subgraph \"DevOps Focus\"\n    C\n    D\n    E\n    end\n\n    subgraph \"Shared\"\n    F\n    end</code></pre>"},{"location":"fundamentals/introduction/#benefits-of-integration","title":"Benefits of Integration","text":"<p>When Agile and DevOps work together, teams achieve:</p> <ul> <li>Faster delivery of valuable features</li> <li>Higher quality through continuous testing and monitoring</li> <li>Better collaboration across all teams</li> <li>Increased reliability and reduced downtime</li> <li>Rapid response to customer needs and market changes</li> </ul>"},{"location":"fundamentals/introduction/#getting-started","title":"Getting Started","text":"<p>Learning Path</p> <p>We recommend following this learning sequence:</p> <ol> <li>Start with Agile: Learn the core principles and mindset</li> <li>Understand frameworks: Explore Scrum or other methodologies</li> <li>Add DevOps: See how Agile and DevOps complement each other</li> <li>Practice: Apply specific practices in your team</li> </ol>"},{"location":"fundamentals/introduction/#what-makes-this-approach-different","title":"What Makes This Approach Different?","text":"<p>Modern software development breaks down traditional barriers:</p> Traditional Approach Modern Approach Long planning cycles Short, iterative cycles Separate Dev/Ops teams Collaborative, cross-functional teams Infrequent releases Continuous delivery Documentation-heavy Working software focus Change resistance Change embracement <p>Next Steps</p> <p>Dive deeper into Agile Principles to understand the foundation, or explore how Agile compares to DevOps.</p>"},{"location":"fundamentals/principles/","title":"Agile Principles","text":"<p>Agile methodology transforms how teams approach software development and project management by emphasizing iterative progress, collaboration, and adaptability.</p>"},{"location":"fundamentals/principles/#the-agile-manifesto","title":"The Agile Manifesto","text":"<p>The Agile Manifesto defines four core values that guide agile development:</p> <ol> <li>Individuals and interactions over processes and tools</li> <li>Working software over comprehensive documentation</li> <li>Customer collaboration over contract negotiation</li> <li>Responding to change over following a plan</li> </ol> <p>Understanding the Values</p> <p>These values don't dismiss the importance of processes, documentation, contracts, or plans. Instead, they emphasize that the items on the left are more valuable for successful software development.</p>"},{"location":"fundamentals/principles/#the-12-agile-principles","title":"The 12 Agile Principles","text":"<p>Beyond the four values, the Agile Manifesto outlines 12 principles:</p> <ol> <li>Customer satisfaction through early and continuous delivery of valuable software</li> <li>Welcome changing requirements, even late in development</li> <li>Deliver working software frequently, with a preference for shorter timescales</li> <li>Business people and developers must work together daily</li> <li>Build projects around motivated individuals and trust them to get the job done</li> <li>Face-to-face conversation is the most efficient method of communication</li> <li>Working software is the primary measure of progress</li> <li>Sustainable development pace that teams can maintain indefinitely</li> <li>Technical excellence and good design enhance agility</li> <li>Simplicity - maximizing the amount of work not done</li> <li>Self-organizing teams produce the best architectures and designs</li> <li>Regular reflection and adjustment of team behavior</li> </ol>"},{"location":"fundamentals/principles/#benefits-of-agile-principles","title":"Benefits of Agile Principles","text":"<ul> <li>Faster time to market through iterative delivery</li> <li>Improved customer satisfaction via continuous collaboration</li> <li>Better team collaboration and communication</li> <li>Increased adaptability to changing requirements</li> <li>Higher quality deliverables through continuous improvement</li> <li>Reduced risk through early and frequent feedback</li> </ul>"},{"location":"fundamentals/principles/#common-agile-frameworks","title":"Common Agile Frameworks","text":"<pre><code>graph TD\n    A[Agile Methodology] --&gt; B[Scrum]\n    A --&gt; C[Kanban]\n    A --&gt; D[XP - Extreme Programming]\n    A --&gt; E[SAFe - Scaled Agile]\n    B --&gt; F[Sprint Planning]\n    B --&gt; G[Daily Standups]\n    B --&gt; H[Retrospectives]\n    C --&gt; I[Visual Workflow]\n    C --&gt; J[WIP Limits]\n    D --&gt; K[Pair Programming]\n    D --&gt; L[Test-Driven Development]</code></pre> <p>Choosing a Framework</p> <p>Different frameworks work better for different teams and projects:</p> <ul> <li>Scrum: Great for teams new to agile, provides structure</li> <li>Kanban: Ideal for teams with continuous flow of work</li> <li>XP: Best for teams focused on technical excellence</li> <li>SAFe: Suitable for large organizations with multiple teams</li> </ul>"},{"location":"fundamentals/principles/#implementing-agile-principles","title":"Implementing Agile Principles","text":""},{"location":"fundamentals/principles/#start-small","title":"Start Small","text":"<p>Begin with one or two principles and gradually adopt more as your team becomes comfortable with the agile mindset.</p>"},{"location":"fundamentals/principles/#focus-on-culture","title":"Focus on Culture","text":"<p>Agile is more about mindset and culture than specific practices. Emphasize collaboration, communication, and continuous learning.</p>"},{"location":"fundamentals/principles/#measure-and-adapt","title":"Measure and Adapt","text":"<p>Use metrics like velocity, cycle time, and customer satisfaction to understand your progress and make improvements.</p> <p>Next Steps</p> <p>Learn about specific frameworks starting with Scrum Framework or explore how Agile and DevOps work together.</p>"},{"location":"fundamentals/scrum-framework/","title":"The Scrum Framework: A Complete Guide","text":"<p>Scrum is the most widely adopted Agile framework for managing product development. It provides a structured yet flexible approach to delivering valuable software through iterative development and continuous improvement.</p>"},{"location":"fundamentals/scrum-framework/#what-is-scrum","title":"What is Scrum?","text":"<p>Scrum is a lightweight framework that helps teams work together to develop, deliver, and sustain complex products. It's built on empirical process control theory, emphasizing transparency, inspection, and adaptation.</p>"},{"location":"fundamentals/scrum-framework/#core-principles","title":"Core Principles","text":"<p>Scrum is founded on three pillars:</p> <ul> <li>Transparency - All aspects of the process (work, progress, goals, and challenges) are visible to those responsible  for the outcome</li> <li>Inspection - Scrum artifacts(Product Backlog, Sprint Backlog, Increment/Done) and progress are frequently inspected to detect variances</li> <li>Adaptation - Adjustments are made when deviations are detected</li> </ul>"},{"location":"fundamentals/scrum-framework/#the-scrum-team","title":"The Scrum Team","text":""},{"location":"fundamentals/scrum-framework/#product-owner","title":"Product Owner","text":"<ul> <li>Manages the Product Backlog</li> <li>Defines acceptance criteria and priorities</li> <li>Acts as the voice of the customer</li> </ul>"},{"location":"fundamentals/scrum-framework/#scrum-master","title":"Scrum Master","text":"<ul> <li>Facilitates Scrum events</li> <li>Removes impediments/obstacles for the team</li> <li>Coaches the team on Scrum practices</li> </ul>"},{"location":"fundamentals/scrum-framework/#development-team","title":"Development Team","text":"<ul> <li>Develops the product increment</li> <li>Self-organizes to complete work</li> <li>Typically 3-9 cross-functional members</li> </ul>"},{"location":"fundamentals/scrum-framework/#scrum-events-ceremonies","title":"Scrum Events (Ceremonies)","text":""},{"location":"fundamentals/scrum-framework/#sprint","title":"Sprint","text":"<p>Sprint Overview</p> <p>A time-boxed iteration (usually 1-4 weeks) during which a potentially shippable product increment is created.</p>"},{"location":"fundamentals/scrum-framework/#sprint-planning","title":"Sprint Planning","text":"<p>Purpose: Plan the work for the upcoming sprint Duration: Up to 8 hours for a 4-week sprint  </p> <p>Key questions: 1. What can be delivered in this sprint? 2. How will the work be accomplished?</p>"},{"location":"fundamentals/scrum-framework/#daily-scrum","title":"Daily Scrum","text":"<p>Purpose: Synchronize team activities Duration: 15 minutes  </p> <p>Three questions: 1. What did I do yesterday? 2. What will I do today? 3. Are there any impediments?</p>"},{"location":"fundamentals/scrum-framework/#sprint-review","title":"Sprint Review","text":"<p>Purpose: To present the completed product increment to stakeholders Focus: Gather constructive feedback, and inform future backlog adjustments. Participants: Scrum Team + Stakeholders</p>"},{"location":"fundamentals/scrum-framework/#sprint-retrospective","title":"Sprint Retrospective","text":"<p>Purpose: Inspect the team's process and plan improvements Focus: What went well, what could improve, what to commit to Participants: Scrum Team (Product Owner, Scrum Master, Development Team)</p>"},{"location":"fundamentals/scrum-framework/#scrum-artifacts","title":"Scrum Artifacts","text":""},{"location":"fundamentals/scrum-framework/#product-backlog","title":"Product Backlog","text":"<p>Ordered list of features and requirements for the product, prioritized by business value.</p> <p>Example user story format: <pre><code>As a [user type], I want [goal] so that [benefit]\n\nAcceptance Criteria:\n- Given [context], when [action], then [outcome]\n</code></pre></p>"},{"location":"fundamentals/scrum-framework/#sprint-backlog","title":"Sprint Backlog","text":"<p>Product Backlog items selected for the sprint plus the plan for delivering them.</p>"},{"location":"fundamentals/scrum-framework/#product-increment","title":"Product Increment","text":"<p>Sum of all completed items that meet the Definition of Done.</p>"},{"location":"fundamentals/scrum-framework/#definition-of-done-dod","title":"Definition of Done (DoD)","text":"<p>A shared understanding of completion criteria:</p> <ul> <li>[ ] Code is written and reviewed</li> <li>[ ] Tests are written and passing</li> <li>[ ] Documentation is updated</li> <li>[ ] Product Owner has accepted the work</li> </ul>"},{"location":"fundamentals/scrum-framework/#estimation-and-metrics","title":"Estimation and Metrics","text":""},{"location":"fundamentals/scrum-framework/#story-points","title":"Story Points","text":"<p>Relative sizing using Fibonacci sequence (1, 2, 3, 5, 8, 13, 21) focusing on complexity rather than time.</p>"},{"location":"fundamentals/scrum-framework/#velocity","title":"Velocity","text":"<p>Amount of work completed in a sprint, used for planning future sprints.</p>"},{"location":"fundamentals/scrum-framework/#burndown-charts","title":"Burndown Charts","text":"<p>Visual representation of remaining work in a sprint or release.</p>"},{"location":"fundamentals/scrum-framework/#best-practices","title":"Best Practices","text":""},{"location":"fundamentals/scrum-framework/#getting-started","title":"Getting Started","text":"<ol> <li>Form the team with proper roles</li> <li>Create initial Product Backlog</li> <li>Establish Definition of Done</li> <li>Plan and execute first sprint</li> </ol>"},{"location":"fundamentals/scrum-framework/#common-anti-patterns-to-avoid","title":"Common Anti-Patterns to Avoid","text":"<p>Scrum Anti-Patterns</p> <p>Scrum-but: Skipping key ceremonies or practices Mini-waterfall: Treating sprints as sequential phases Proxy Product Owner: Decision-making by non-PO  </p>"},{"location":"fundamentals/scrum-framework/#continuous-improvement","title":"Continuous Improvement","text":""},{"location":"fundamentals/scrum-framework/#retrospective-techniques","title":"Retrospective Techniques","text":"<ul> <li>Start, Stop, Continue - Simple improvement format</li> <li>5 Whys - Root cause analysis of a problem</li> <li>Focus on actionable improvements each sprint</li> </ul>"},{"location":"fundamentals/scrum-framework/#scrum-process-flow","title":"Scrum Process Flow","text":"<pre><code>graph TD\n    A[Product Backlog] --&gt; B[Sprint Planning]\n    B --&gt; C[Sprint Backlog]\n    C --&gt; D[Sprint Execution]\n    D --&gt; E[Daily Scrum]\n    E --&gt; D\n    D --&gt; F[Sprint Review]\n    F --&gt; G[Sprint Retrospective]\n    G --&gt; H[Product Increment]\n    H --&gt; A\n    F --&gt; A\n\n    style A fill:red\n    style C fill:red\n    style H fill:green</code></pre>"},{"location":"fundamentals/scrum-framework/#conclusion","title":"Conclusion","text":"<p>Scrum provides a proven framework for teams to deliver value incrementally while continuously improving. Success requires commitment to its principles, consistent practice, and willingness to adapt based on experience and feedback.</p>"}]}